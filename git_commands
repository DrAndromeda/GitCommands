git status [-s]

$ git commit -m "Story 182: Fix benchmarks for speed"
вы можете набрать свой комментарий к коммиту в командной строке вместе с командой commit указав его после параметра -m

$ git commit -a -m 'added new benchmarks'
Если у вас есть желание пропустить этап индексирования, Git предоставляет простой способ. Добавление параметра -a в команду git commit заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без git add:

------Удаление файлов-------
$git rm <fileName>
удаляет файл из вашего рабочего каталога, так что вы в следующий раз не увидите его как “неотслеживаемый”.
Если вы просто удалите файл из своего рабочего каталога, он будет показан в секции ``Changes not staged for commit`` (измененные, но не проиндексированные) 

$git rm  -f <fileName>
Если вы изменили файл и уже проиндексировали его, вы должны использовать принудительное удаление с помощью параметра -f.

$ git rm --cached README
полезная штука, которую вы можете захотеть сделать — это удалить файл из индекса, оставив его при этом в рабочем каталоге. Другими словами, вы можете захотеть оставить файл на жёстком диске, и убрать его из-под бдительного ока Git. Это особенно полезно, если вы забыли добавить что-то в файл .gitignore и по ошибке проиндексировали, например, большой файл с логами, или кучу промежуточных файлов компиляции. Чтобы сделать это, используйте опцию --cached:

$ git rm log/\*.log
В команду git rm можно передавать файлы, каталоги или glob-шаблоны. Это означает, что вы можете вытворять что-то вроде: log/\*.log

Обратите внимание на обратный слэш (\) перед *. Он необходим из-за того, что Git использует свой собственный обработчик имён файлов вдобавок к обработчику вашего командного интерпретатора. Эта команда удаляет все файлы имеющие расширение .log находящиеся в директории log/. Или же вы можете сделать вот так:


$ git rm \*~
Эта команда удаляет все файлы, чьи имена заканчиваются на ~.


-------------------------------
----Переименование файлов------
-------------------------------

$ git mv file_from file_to

Однако, это эквивалентно выполнению следующих команд:

$ mv README.md README
$ git rm README.md
$ git add README



---------------------------------
----Просмотр истории коммитов----
---------------------------------


$ git log
просмотреть историю коммитов

$ git log -p -2
показывает разницу, внесенную в каждый коммит. Так же вы можете использовать аргумент -2, который позволяет установить лимит на вывод количества коммитов. В данном случае их будет только два


$ git log --stat
увидеть сокращенную статистику для каждого коммита


$ git log --pretty [=oneline,=short,=full,=fuller]
Эта опция меняет формат вывода. Существует несколько встроенных вариантов отображения. Например, опция oneline печатает каждый коммит в одну строку, что может быть очень удобным если вы просматриваете большое количество коммитов. К тому же, опции short, full и fuller делают вывод приблизительно в том же формате, но с меньшим или большим количеством информации соответственно.

$ git log --pretty=format:"%h - %an, %ar : %s"
позволяет создать свой формат для вывода информации. Особенно это может быть полезным когда вы хотите сгенерировать вывод для автоматического анализа – так как вы указываете формат явно, он не будет изменен даже после обновления Git.
(Таблица параметров https://git-scm.com/book/ru/v2/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2)

$ git log --pretty=format:"%h %s" --graph
Опции oneline и format являются особенно полезными с опцией --graph команды log. С этой опцией вы сможете увидеть небольшой граф в формате ASCII, который показывает текущую ветку и историю слияний:

$ git log --since=2.weeks
следующая команда покажет список коммитов, сделанных за последние две недели.

$ git log -Sfunction_name
найти последний коммит, который добавил или удалил вызов определенной функции, вы можете запустить команду.

$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
увидеть, в каких коммитах произошли изменения в тестовых файлах в истории исходного кода Git, автором которых был Junio Hamano и которые не были слияниями в октябре 2008 года, вы можете запустить следующую команду:

Table 2-2. Наиболее распространенные опции для команды git log
Опция	Описание
-p

Показывает патч для каждого коммита.

--stat

Показывает статистику измененных файлов для каждого коммита.

--shortstat

Отображает только строку с количеством изменений/вставок/удалений для команды --stat.

--name-only

Показывает список измененных файлов после информации о коммите.

--name-status

Показывает список файлов, которые добавлены/изменены/удалены.

--abbrev-commit

Показывает только несколько символом SHA-1 чек-суммы вместо всех 40.

--relative-date

Отображает дату в относительном формате (например, "2 weeks ago") вместо стандартного формата даты.

--graph

Отображает ASCII граф с ветвлениями и историей слияний.

--pretty

Показывает коммиты в альтернативном формате. Возможные варианты опций: oneline, short, full, fuller и format (с помощью последней опции вы можете указать свой формат).

-(n)

Показывает только последние n коммитов.

--since, --after

Показывает только те коммиты, которые были сделаны после указанной даты.

--until, --before

Показывает только те коммиты, которые были сделаны до указанной даты.

--author

Показывает только те коммиты, в которых запись author совпадает с указанной строкой.

--committer

Показывает только те коммиты, в которых запись committer совпадает с указанной строкой.

--grep

Показывает только коммиты, сообщение которых содержит указанную строку.

-S

Показывает только коммиты, в которых изменение в коде повлекло за собой добавление или удаление указанной строки.
